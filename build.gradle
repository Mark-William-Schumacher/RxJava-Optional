def localProperty(name) {
    Properties props = new Properties()
    props.load(project.rootProject.file('local.properties')
            .newDataInputStream())
    return props.getProperty(name.toString())
}

def bintrayUser() {
    return localProperty("bintrayUser") ?: bintrayUser ?: "";
}

def bintrayApiKey() {
    return localProperty("bintrayApiKey") ?: bintrayApiKey ?: "";
}

def gpgPassphrase() {
    return localProperty("gpgPassphrase") ?: gpgPassphrase ?: "";
}


buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
    }
}

allprojects {
    apply plugin: 'idea'

    group = 'org.jfrog.example.bintray.gradle'
    version = '1.2-gradle-publish'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    dependencies {
        testCompile 'junit:junit:4.7'
    }

    // custom tasks for creating source/javadoc jars
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    // add javadoc/source jar tasks as artifacts
    artifacts {
        archives sourcesJar, javadocJar
    }

    repositories {
        jcenter()
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                if (plugins.hasPlugin('war')) {
                    from components.web
                } else {
                    from components.java
                }

                artifact sourcesJar
                artifact javadocJar
            }
        }
    }

    bintray {
        user = bintrayUser()
        key = bintrayApiKey()

        publications = ['mavenJava'] //When uploading Maven-based publication files
        dryRun = false //Whether to run this as dry-run, without deploying
        publish = false //If version should be auto published after an upload
        pkg {
            repo = 'maven'
            name = pkgName
            desc = 'RxJava-Optional is an library that allows developers to use Optional using RxJava'
            websiteUrl = siteUrl
            issueTrackerUrl = 'https://github.com/eccyan/RxJava-Optional/issues'
            vcsUrl = 'https://github.com/eccyan/RxJava-Optional.git'
            licenses = ['Apache-2.0']
            labels = ['optional', 'backport']
            publicDownloadNumbers = true
        }
        version {
            name = pkgVersion
            vcsTag = pkgVersion
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = gpgPassphrase()
            }
        }
    }
}

